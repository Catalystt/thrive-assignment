name: Build, Push & Deploy to EKS

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
      # Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v2

      # Set up QEMU (for multi-architecture builds if needed)
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Log in to DockerHub
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Build and push the Docker image from app/Dockerfile to DockerHub
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v3
        with:
          context: ./app
          file: ./app/Dockerfile
          push: true
          tags: jasonhuang0425/node-hello-world:latest

      # Configure AWS credentials for EKS access
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Update kubeconfig so kubectl can interact with your EKS cluster
      - name: Update kubeconfig for EKS
        run: |
          aws eks update-kubeconfig --name ${{ secrets.CLUSTER_NAME }} --region ${{ secrets.AWS_REGION }}

      # Update the Kubernetes Deployment image with the new Docker image
      - name: Update Kubernetes Deployment with new image
        env:
          NAMESPACE: ${{ secrets.NAMESPACE }}
          DEPLOYMENT_NAME: ${{ secrets.DEPLOYMENT_NAME }}
          CONTAINER_NAME: ${{ secrets.CONTAINER_NAME }}
          DOCKER_IMAGE: "jasonhuang0425/node-hello-world:latest"
        run: |
          echo "Updating image for deployment ${DEPLOYMENT_NAME} in namespace ${NAMESPACE}..."
          kubectl set image deployment/${DEPLOYMENT_NAME} ${CONTAINER_NAME}=${DOCKER_IMAGE} -n ${NAMESPACE}
          echo "Waiting for rollout status..."
          kubectl rollout status deployment/${DEPLOYMENT_NAME} -n ${NAMESPACE}

